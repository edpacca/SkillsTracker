@page "/admin-users"
@inject HttpClient Http
@rendermode InteractiveServer
@namespace Admin

<h2>Admin Manage Users</h2>

<div class="flex-center">
    <div class="w-100">
        @if (EditingUser == null)
        {
            <UserCreation OnFormSubmit=@SaveUser />
        }
        else
        {
            <UserEdit User=@EditingUser OnFormSubmit=@UpdateUser OnFormCancel=@OnEditCancel />
        }
    </div>
    <hr />
    <QuickGrid Items="users.AsQueryable()">
        <PropertyColumn Property="@(user => user.Id)" Title="ID" Sortable="true" />
        <PropertyColumn Property="@(user => user.Name)" Title="Name" Sortable="true" />
        <PropertyColumn Property="@(user => user.Email)" Title="Email" Sortable="true" />
        <TemplateColumn Title="Actions" Context="user">
            <button class="btn btn-primary btn-sm mx-1" @onclick="() => OnEdit(user)">Edit</button>
        </TemplateColumn>
        <TemplateColumn Title="Actions" Context="user">
            <button class="btn btn-danger btn-sm mx-1" @onclick="() => OnDelete(user)">Delete</button>
        </TemplateColumn>
    </QuickGrid>
</div>

@code {
    private List<User> users = [];

    private User? EditingUser = null;

    private const string baseApiUrl = "api/users";
    private static string ApiUrlWithId(int userId)
    {
        return String.Format("{0}/{1}", baseApiUrl, userId);
    }

    private void OnEditCancel()
    {
        EditingUser = null;
    }

    private void OnEdit(User user)
    {
        EditingUser = user;
    }

    private async Task OnDelete(User user)
    {
        await DeleteUser(user.Id);
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshUserList();
    }

    private async Task SaveUser(User? user)
    {
        if (user != null)
        {
            var response = await Http.PostAsJsonAsync(baseApiUrl, user);
            if (response.StatusCode == HttpStatusCode.OK)
            {
                await RefreshUserList();
            }
        }
    }

    private async Task UpdateUser(User user)
    {
        if (user != null)
        {
            var response = await Http.PutAsJsonAsync(ApiUrlWithId(user.Id), user);
            if (response.StatusCode == HttpStatusCode.OK)
            {
                await RefreshUserList();
                EditingUser = null;
            }
        }
    }

    private async Task RefreshUserList()
    {
        var response = await Http.GetFromJsonAsync<List<User>>(baseApiUrl);
        users = response ?? [];
    }

    private async Task DeleteUser(int userId)
    {
        var response = await Http.DeleteAsync(ApiUrlWithId(userId));
        if (response.StatusCode == HttpStatusCode.NoContent)
        {
            await RefreshUserList();
        }
    }
}
