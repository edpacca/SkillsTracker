@page "/admin-users"
@rendermode InteractiveServer
@inject HttpClient Http
@namespace Admin

<MudContainer>

    <MudText Typo="Typo.h2">Admin - Manage Users</MudText>

    <div class="flex-center">
        <div class="w-100">
            @if (EditingUser == null)
            {
                <UserCreation OnFormSubmit=@SaveUser />
            }
            else
            {
                <UserEdit User=@EditingUser OnFormSubmit=@UpdateUser OnFormCancel=@OnEditCancel />
            }
        </div>
        <hr />
        <MudDataGrid T="User" ServerData="LoadUserData" Bordered=true Dense=true Striped=true RowsPerPage="10">
            <Header>
                <MudTh></MudTh>
                <MudTh>Id</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Actions</MudTh>
            </Header>
            <Columns>
                <SelectColumn T="User" />
                <PropertyColumn Property="user => user.Id" Title="ID" Sortable="true" />
                <PropertyColumn Property="user => user.Name" Title="Name" Sortable="true" />
                <PropertyColumn Property="user => user.Email" Title="Email" Sortable="true" />
                @* <TemplateColumn Title="Actions" Context="user">
                <MudButton OnClick="@() => OnEdit(user)">Edit</MudButton>
            </TemplateColumn>
            <TemplateColumn Title="Actions" Context="user">
                <button class="btn btn-danger btn-sm mx-1" @onclick="() => OnDelete(user)">Delete</button>
            </TemplateColumn> *@
            </Columns>
            <PagerContent>
                <MudDataGridPager T="User" />
            </PagerContent>
        </MudDataGrid>
    </div>

</MudContainer>
@code {
    private List<User> users = [];

    private User? EditingUser = null;

    private const string baseApiUrl = "api/users";
    private static string ApiUrlWithId(int userId)
    {
        return String.Format("{0}/{1}", baseApiUrl, userId);
    }

    private void OnEditCancel()
    {
        EditingUser = null;
    }

    private void OnEdit(User user)
    {
        EditingUser = user;
    }

    private async Task OnDelete(User user)
    {
        await DeleteUser(user.Id);
    }

    private async Task SaveUser(User? user)
    {
        if (user != null)
        {
            var response = await Http.PostAsJsonAsync(baseApiUrl, user);
        }
    }

    private async Task UpdateUser(User user)
    {
        if (user != null)
        {
            var response = await Http.PutAsJsonAsync(ApiUrlWithId(user.Id), user);
            if (response.StatusCode == HttpStatusCode.OK)
            {
                EditingUser = null;
            }
        }
    }


    private async Task<GridData<User>> LoadUserData(GridState<User> state)
    {
        var page = state.Page;
        var pageSize = state.PageSize;
        var queryUrl = $"{baseApiUrl}?page={page}&size={pageSize}&sortBy=Id&asc=true";
        var response = await Http.GetFromJsonAsync<PagedResponse<User>>(queryUrl);
        if (response == null)
        {
            return new GridData<User> { Items = [], TotalItems = 0 };
        }
        return new GridData<User> { Items =  response.Data ?? [], TotalItems = response.TotalCount };
    }

    private async Task DeleteUser(int userId)
    {
        var response = await Http.DeleteAsync(ApiUrlWithId(userId));
    }
}
